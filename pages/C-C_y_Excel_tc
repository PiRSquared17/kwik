La comprobación de la liquidación se hace comparando los datos de un mes recogidos por las tiendas en el C-Control con los recibidos por Orange.

Los datos de Orange se descargan en un archivo csv (valores separados por comas) de la web Portal Distribuidor. Cada una de estas líneas, contiene un alta, esto es, un número de teléfono. Dadas las características de ese alta (terminal, contrato, fecha...) le corresponde unas comisiones.
Es preciso comprobar cada una de estas líneas con las del mismo mes del C-Control, en base al número de teléfono, para ver cuales están, no están o se pagan correctamente.

Actualmente se realiza este proceso manualmente en Excel. Existen algunas soluciones:
# Importar a MySQL los datos de Orange y compararlos en el C-Control con un select inner join. Engorroso, pueden variar los campos y obligaria a reescribir el programa casi mensualmente.
# Exportar los datos de C-Control y Orange a Access para que él los una con una consulta cruzada. Proceso largo.
# Realizar la unión de tablas en el propio Excel. Excel no incorpora por defecto esta herramienta, aunque existen complementos de pago.

Tiene sentido que el entorno adecuado para fusionar tablas sea en el que se tienen las tablas, en vez de pasarlas a otro entorno y despues volverlas al inicial. Por eso, la opción más adecuada es la opción 3, ya que existen módulos comerciales para Excel que realizan el "merge" de dos tablas, como  www.digdb.com o www.spinnakeradd-ins.com . Dichos módulos son en realidad macros programadas en VBA (visual basic for appliacations), el lenguaje de programación endebido en Office.

Es posible tanto programar macros como "grabarlas", es decir, realizar una secuencia de acciones y que sea Excel quien genere el código. Sin embargo no nos proporciona todas las posibilidades. Así que accedemos al módulo de programación pulsando Alt+F11.

El entorno es similar al Visual Studio 6.

Ejemplos:
 n.Formula = "=A" & c & "+1"
 n.Value = WorksheetFunction.Sum(Range("A" & c & ":A7"))
 n.Formula = "=SUMA(A1:A7)"

Hay tres maneras de ejecutar nuestra macro al abrir Excel:
# La macro va asociada a un libro .xls, y al abrirse el libro (workbook) la macro se autoejecuta
# La macro se ha guardado como .xla. desde el menú herramientas->complementos le buscamos y añadimos, con lo cual se instala en c:\documents and settings\usuario\datos de programa\microsoft\complementos . gracias al método auto_open se ejecuta automáticamente.
# Hacemos doble clic en el archivo .xla y se instala el complemento (add-in). funciona mientras se mantenga la ubicación del mismo, y pide confirmación al ejecutarse (no está en fuentes de confianza).

Es importante que las referencias a las hojas del libro se hagan con ActiveWorkbook, ya que con ThisWorkbook lo que hace es referenciar al libro de la macro, en vez de el actual.

Referencias útiles:
* http://support.microsoft.com/default.aspx?scid=kb;en-us;829070
* http://www.mindspring.com/%7Etflynn/excelvba.html
* http://www.angelfire.com/biz7/julian_s/julian/julians_macros.htm
* http://www.exceluciones.com/portal/viewtopic.php?t=341
* http://www.functionx.com/excel/vba/
* http://www.fontstuff.com/vba/vbatut07.htm
* http://pubs.logicalexpressions.com/Pub0009/LPMArticle.asp?ID=349
* http://www.cpearson.com/excel/cells.htm
* http://support.microsoft.com/kb/156942/en-us
* http://office.microsoft.com/en-us/assistance/HA010872961033.aspx
* http://www.tushar-mehta.com/excel/vba/vba-Understand%20code.htm
* http://www.geocities.com/SiliconValley/Lab/5586/efaq.html
* http://www.ozgrid.com/VBA/custom-menus.htm
* http://www.tushar-mehta.com/excel/vba/beyond_the_macro_recorder/
* http://www.mrexcel.com/tip021.shtml