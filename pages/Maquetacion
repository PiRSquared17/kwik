Recopilación de trucos y ayudas sobre maquetación. En cada apartado, los tag HTML se indican en mayúsculas y las propiedades CSS en cursiva.

== Repaso. Teoría y trucos ==
'''Orden de los diferentes elementos en la definición de una regla de estilo'''
Separamos lo que es la parte de colocación del resto:
   1. Como se va a mostrar o comportar ese elemento, si es de linea o bloque con display
   2. Sus dimensiones , y siempre primero width y despues height
   3. Como se va a posicionar, aquí entra en juego position, float, clear
   4. Después sigo el modelo de cajas, primero el margin, despues el border y por último el padding,     
LLegado a este punto ya tenemos como se va a colocar, falta darle gracia
   5. Primero pongo la alineación del texto, text-align, o como se comportará el texto , text-indent etc..
   6. Sigo con la fuente y todas sus propiedades y usando con cabeza su forma corta, recordemos que para usar font:, siempre tenemos que decirle como mínimo su tamaño y su fuente, y si estamos heredando el font-family: , y solo queremos cambiar a un poco más grande y en fuerte
      yo uso font-size:1.1em; font-weigth:bold, pero esto lo explicare en otro post para no cargar este.
   7. después el color de la fuente seguido del background,recordemos que todo color de fuente que pongamos deberíamos poner un backgrund, aunque sea blanco o heredado, por temas de accesibilidad
   8. y después alguna propiedad que podamos necesitar, pero no creo que sea en muchos casos, por eso las dejo para el final,

No hace falta decir, que no hay que ponerlas todas, las pongo en ese orden en caso de necesitarlas.
Con esto si vemos que hay mucho margen, vamos al firebug comprobamos la linea y nos vamos a editar el css, y vamos a tiro fijo.
Por Ejemplo:

   h1 { width:222px; height:34px;float:left; margin-top:5px; text-indent:-9999px;  background: url(/../css/imagenes/interface/logo.png) no-repeat;}

Usar ids y clases mediante CSS, nunca usar el atributo style de los elementos.
Font: bold/normal tamaño familia.
Orden: display position flota margin border padding etc…
Padding y margin:
x: todo.
x y: right/left top/bottom.
x y z: top right/left bottom.
x y z d: top right bottom left.
Hacks:
IE7: *:first-child+html {}*
IE6: * html {}*
----


width: ancho
pero no es el ancho efectivo del bloque, el ancho que ocupará en pantalla para float
ancho real=ancho+paddings tab Layout de firebug

*''display'' puede ser ''block'', ''inline'' o ''table''. Hay elementos que son ''inline'' por defecto, como A o SPAN. Otros son ''block'', como DIV o H1.
*Según el sistema de posicionamiento establecido por position los elementos se van colocando en pantalla:
**relative: Los bloques se dispondrán uno a continuación de otro, en lineas sucesivas. Este es el comportamiento por defecto y se puede omitir.
***float: left/right; Si el contenedor es relative y tiene una anchura, los elementos indicados por float se dispondrán en la misma línea uno a continuación del otro, hasta que su ancho supere al espacio disponible en el contenedor, en cuyo caso pasarán a otra línea. Estos elementos deben tener un ''width'' explícito, ademas del citado ''float''. Similar a escribir texto en un textarea.
**absolute: Posiciona el bloque siempre en las coordenadas indicadas por top/bottom/left/right. El origen de coordenadas es el punto donde se empezó a dibujar el primer elemento padre (su esquina superior izquierda) que '''tenga explícitamente''' ''position: relative;''. Si no se encuantra ninguno, tomará BODY como origen.
*Aplicar un estilo a A (anchor) lo aplica a todos los estados. Para particularizar a cada estado:
 a:link son sólo los A que tienen un atributo HREF
 a:active el recuadrito que hace firefox en el momento de pinchar
 a:visited enlaces visitados
 a:hover al pasar el ratón por encima
*Los A que te llevan a un lugar en la misma página. Pinchando en el A con ''href'', saltamos gracias al # al A con ese ''name''.
 a href="#xxx"
 ...
 a name="xxx"
*Quitamos el borde de los A que les aparece tras ser pulsados. Este borde tiene el mismo ''color'' que el A. Este borde lo gobierna la propiedad ''outline'', y puede reducirse con ''outline-offset: -1px''
 a:visited,a:active,a:focus {outline: none;}
*No aplicar ''list-style-image: url();'' a las listas, ya que no queda bien el lugar donde dibuja el elemento (lo hace antes del márgen). En su lugar, para decorar las listas, a los LI aplicarles un ''padding-left'' y un ''background: url() no-repeat 0px 0px;''
*Cuando usemos jdMenu para conseguir menús desplegables, no indicar ''position: relative;'' en ninguno de los contenedores del UL pues descoloca el cálculo de posiciones de los submenús. Además el UL anidado (submenús) puede requerir aplicación de ''z-order: 100;'' para que esté por encima del resto de la página.
*Cuando hagamos una barra de menús con UL, a los LI no darles altura, margin y fondo colocado. El A es el que tiene ''height'', ''padding'', y ''margin''.
*Usar más ''line-height'' y ''text-indent'' que ''margin'' y ''padding''. Padding nos obliga a disminuir el valor de ''width''. Sin embargo, ''text-indent'' sólo afecta a la primera línea.
*''display: block;'' convierte en bloque a los A y los SPAN, para que puedan tener margin y width/height. Los A y SPAN son elementos que por defecto son ''float: left''.
*FORM no es contenedor, no puede tener texto. Los elementos P, SPAN, INPUT... deben estar dentro de un DIV. FORM puede estar tanto dentro como fuera de ese DIV (mejor fuera).
*Para fijar una altura mínima a un elemento y que funcione en todos los navegadores, usar cualquiera de estos snippets:
 min-height: 256px; height: auto !important; height: 256px;
 min-height: 256px; *height: 256px;
*Los label pueden ir de dos maneras:
 label texto input /label
 label for="ID" texto label input id="ID"
*Para añadir separación entre filas de una tabla, los TR deben ser ''display: block''. Son ''display: table''.
*''display:inline-block'' sirve para alinear flotantes seguidos que ocupan más de una línea, pero es exclusivo de Firefox 3
*LINK MEDIA="" permite indicar si la hoja de estilo se aplica para todo, imprimir o en pantalla (ALL, PRINT, SCREEN).
*aplicar ''min-height'' para que los elementos tengan altura mínima. IE6 no lo reconoce, así que indicar ''_height'', que sólo lo lee él. height en IE6 es equivalente a ''min-height''
*CITE para cursivas
*EM para subrayados
*STRONG para negritas

=== Accesibilidad AAA ===
La accesibilidad es la garantía de que una página es plenamente operable para todo tipo de personas y navegadores. Todo el mundo debe poder llegar al mismo sitio. Unos pueden hacerlo mediante animaciones y colorines, otros no. El caso es que el objetivo sea alcanzable por todos. Además, aplicar las siguientes reglas:
*todos los controles de un formulario con su LABEL
*ningún INPUT sin texto
*el documento debe ser entendible sin CSS
*el documento debe funcionar sin JS
*JS debería funcionar tanto con ratón como con teclado
*las tablas con CAPTION (summary es deprecated)
*tabindex si el orden de tabulación no es el deseado
*accesskey si necesario
*todas las imágenes con alt
*longdesc en imágenes (ofrece una url más explicativa que alt)
*usar title en IMG y A allá donde resulte aclaratorio
*dentro de OBJECT poner un texto alternativo para aquellos navegadores que no lo renderizan

=== Reset inicial ===
Al principio del documento es bueno dar por sentadas una serie de reglas:
 * {margin: 0; padding 0;} /*nada tendrá márgenes ni padding*/
 a:hover {text-decoration: none;} /*damos un poco de animación a los anchor*/
 a:focus {outline: none;} /*cuando se pulsen, no quedan bordeados, pues desvelan áreas*/
 table {border-collapse: collapse;} /*evita añadir a mano cellpadding y cellspacing*/
 caption, hr {display: none;} /*caption está por accesibilidad, hr para separar sin CSS*/
 em {text-decoration: underline; font-style: normal;}

=== Clearfix ===
Los elementos flotantes dentro de un div, hacen que dicho div no tenga altura. Esto es problemático si hay más divs a continuación, pues complica sobremanera la maquetación. El otorgar altura a este tipo de divs de una manera sencilla permitirá una maquetación más simple.
IE proporciona altura automáticamente. Para que lo haga Firefox, ''el último elemento del div no debe ser float y debe tener clear:both''. Bien sirve un br style="clear:both"/, pero mejor es posicionar un carácter mediante css:after y hacerlo invisible.

=== Bugs IE6 ===
*''!important'' no lo reconoce. Aplica propiedades en base a last-match-wins.
*Los ''li:hover'' y los ''tr:hover'' no existen.
*Con una sucesión de elementos ''float: left;'' si además tienen ''margin-left'', el IE6 duplicará ese margin-left. evitar este efecto añadiendo ''display: inline;'' al elemento flotante. http://www.positioniseverything.net/explorer/doubled-margin.html
*Si duplica la altura de una ristra de LI, es porque no tienen ''border''.
*Si un bloque contiene elementos dos ''position: absolute;'' y un tercero no, sólo visualiza el segundo de los posicionados absolute. La solución es que los tres estén ''absolute''.
*Los H1 de encabezados deben ser ''position: absolute;'' para que IE6 les proporcione una anchura y les podamos clicar como si fueran A. Deben tener algún ''background'' para poder ser clicables. En otros navegadores podemos hacerles flotantes o sin ''background''.
*En las hojas de CSS para añadir caracteres especiales en los comentarios ha de ponerse en la primera línea de código
 @charset "utf-8";
*Cuando un UL es flotante ''float: left'', tiene margin del lado que flota ''margin-left: XXpx'' y se le da ''display: inline'' para que el IE6 no duplique el margin, el IE6 y el IE7 dan el margin correcto, pero también dan un padding-left al UL igual al margin, moviendo así los LI. La mejor solución es dar padding al contenedor en el que se encuentre flotando el UL. Si hacer ésto no fuera posible queda la opción de meter el UL en un DIV y hacer a éste flotante y darle un margin.
*Si se escribe el valor "no-repeat", debe escribirse con una separación o espacio DESPUÉS del parentesis, en Firefox lo veremos perfectamente, pero en IE6 e IE7 no se verá el fondo: background: #fff url(/imagenes/comunes/imagen.jpg) no-repeat;
*''max-height'' funciona en IE6, pero sólo para los TD
*duplica los últimos caracteres de una cadena de un enlace o de algun elemento sin sentido y sin comprensión alguna. El problema se debe a que el contenedor de dicha cadena se sale de su propio contenedor, ya sea por los márgenes o por el tamaño del contenedor.
*IE7 si hay INPUT de tipo ''hidden'' sin P antes de un SELECT flotante duplicará texto de los OPTION. La solución es meter esos INPUT ''hidden'' dentro del mismo P que el SELECT.

==== Transparencias PNG ====
Haydos modos de aplicarlo: con la propiedad ''filter'' o con ''behavior'' aplicando pngfix. No permite repeticiones, requiere anular background. El pngfix introduce menos elementos a cancelar, con lo que sólo hay que pasar al otro archivo las definiciones con behavior. Filter hace desaparecer a los que no son absolute.

Lo aplicamos mediante una hoja aparte.
 <!--[if lt IE 7]>
  <link href="/portal/page/portal/juventud_santander/htdocs/css/ie6.css" type="text/css" rel="stylesheet" media="all" />
 <![endif]-->

Este fichero contiene:
 #logo {behavior: url(/portal/page/portal/juventud_santander/htdocs/css/iepngfix.htc);}
Lo cual evita que el css sea inválido pues behavior no es una propiedad estándar.

Indicar archivos .htc como mime-type a nivel de web.xml

=== Layout ===
==== Todo el ancho ====
Tres columnas que ocupen el ancho del navegador y un pie. No se puede hacer con absolute pues si las laterales son más altas que la central, no coge su altura. Hay que hacerlo con márgenes. Tampoco se puede hacer con porcentajes y float left. Si alguna columna necesita ancho fijo, será la central la que tenga ancho variable y no lo conocemos.
 nivel principal (body, un td, un div...)
  contenedor
   central
  izquierda
  derecha


=== Menos importantes ===
*''cursor: pointer;'' evita que los A canten debido al cambio de cursor
*http://riddle.pl/emcalc el ''em'' como unidad de medida se multiplica de padre a hijo. Mejor usar px o porcentajes.

== Cómo hago... ==
=== Imágenes incrustadas en texto estilo periódico ===
Meter el texto en un P con un cierto ancho y ''text-align: justify;''. Dentro del P, meter un IMG. Aplicarle ''float: left;'' (o right).

=== Dar estilo a un input de tipo file ===
En el css damos los sigiuentes estilos:
 #file {position: relative;}
 div.falso {position: absolute; top: XX; left: XX; z-index: 0; }
 #img {position: absolute; top: XXpx; right: XXpx;}						
 input.file {position: relative; margin-left: XXpx; filter:alpha(opacity='0'); opacity: 0; z-index: 1;}

Donde #file es un contenedor e #img es una imagen.<br />Se han de dar valores a los margenes de tal manera que el input.file quede encima del input 'text' y la imagen encima del botón del input.file.

En el codigo html se ha de añadir:
<pre>
 <div id="file">
   <input class="file" type="file" onchange="document.getElementById('falso').value = this.value" />
   <div class="falso">
     <input id="falso" type="text" name="falso" /><img id="img" src="paht_a_imagen" alt="" />
   </div>
 </div>
</pre>
Esto hace que no se vea el input.file y asi poder dar estilo al input "falso" y a la imagen que es la que va a sustituir al botón.

=== Centrar verticalmente un bloque ===
Para centrar un bloque verticalmente en una pagina página o dentro de otro bloque se da a este bloque una posición absoluta, top: 50%  y margin-top negativo igual a la mitad de su altura.

 div {position: absolute; top: 50%; height: 600px; margin-top: -300px;}

La técnica para centrarlo horizontalmente es similar:
 
 div {position: absolute; left: 50%; width: 500px; margin-left: -250px;}

=== Target _blank ===

Como ya no se usa el atributo target hay varias maneras de abrir ventanas nuevas, todas ellas perfectamente validas:

 <a href="http://ruta" onclick="window.open(this.href, '_blank');return false;">Tal</a>
 <a href="http://ruta" onclick="window.open('http://ruta', '_blank')">Tal</a>
 <a href="http://ruta" onclick="window.open('http://ruta'); return false;">Tal</a>

Si queremos forzar que se abra en una nueva ventana y no en una nueva pestaña debemos indicar por lo menos un atributo propio de la ventana (no funciona en Opera, por lo menos hasta la versión 9.5):

 <a href="http://ruta" onclick="window.open('http://ruta', '', 'menubar=yes'); return false;">Tal</a>

Google conoce todos los atributos que puede tener una ventana abierta con open().
Por si queda alguna duda, las variables que se pasan a la funcion:

 window.open('RUTA', 'TARGET', 'ATRIBUTOS DE LA VENTANA')

=== Rollover sin delay ===
Normalmente cogemos el diseño, y le troceamos en muchas imágenes pequeñitas. Después todas estas imágenes se cargan una por una al cliente. y como efecto colateral, hay un ligero "delay" desde que el usuario pasa el mouse por encima hasta que se carga.

Esto conlleva hacer toda una suerte de malabarismos en JS como:
 p1on = new Image(5,31);
 p1on.src = "/portal/page/portal/juventud_santander/htdocs/img/p1.gif";
 p2on = new Image(5,31);
 p2on.src = "/portal/page/portal/juventud_santander/htdocs/img/p2.gif";
 p3on = new Image(5,31);
 p3on.src = "/portal/page/portal/juventud_santander/htdocs/img/p3.gif";
 p4on = new Image(5,31);
 p4on.src = "/portal/page/portal/juventud_santander/htdocs/img/p4.gif";

Lo que haremos será tener los dibujos en una única imagen. Se pide una sola vez al servidor. menos peticiones, menos ancho de banda, y encima el cliente YA la tiene así que no hace falta precarga. Todo gracias a posicionamiento del background.
*http://css-tricks.com/css-sprites-what-they-are-why-theyre-cool-and-how-to-use-them/

=== Plantillas de correo ===

A la hora de crear plantillas de correo hay recordar las siguientes cosas:

 1. El ancho tiene que ser de un máximo de 640px.
 2. Maquetar siempre con tablas.

=== Incluir varios flash con jquery-media ===

A la hora de incluir los archivos flash en la página web, debemos definir sus dimensiones en el metas:

$(function() {
        $('.media').media({
            autoplay:  true,
            width: 243,
            height: 274,
            params:    { wmode: 'transparent', quality: 'high' }, // object params/embed attrs
            caption:   false // supress caption text
        });
});

Si queremos incluir varios archivos, al añadirlos lo unico que debemos hacer es cambiarles la clase y definirla en el metas:

<div id="flash">
    <a class="media" href="/flahs.swf"></a>
</div>

<div id="flash">
    <a class="media2" href="/flash2.swf"></a>
</div>

<div id="flash">
    <a class="media3" href="/flash3.swf"></a>
</div>

·
·
·

    $(function() {
        $('.media').media({
            autoplay:  true,
            width: 243,
            height: 274,
            params:    { wmode: 'transparent', quality: 'high' }, // object params/embed attrs
            caption:   false // supress caption text
        });
       
        $('.media2').media({
            autoplay:  true,
            width: 365,
            height: 274,            
            params:    { wmode: 'transparent', quality: 'high' }, // object params/embed attrs
            caption:   false // supress caption text
        });
       
        $('.media3').media({
            autoplay:  true,
            width: 649,
            height: 171,            
            params:    { wmode: 'transparent', quality: 'high' }, // object params/embed attrs
            caption:   false // supress caption text
        });
       
    });