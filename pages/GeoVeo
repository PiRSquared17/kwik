GeoVeo es un sistema de tracking, implementado bajo unos principios de sencillez extrema. Responde a una creciente demanda de estos productos que no se puede atender debido al alto precio de estos sistemas.
El sistema está diseñado de tal modo que exige una infraestructura mínima.
Las metas del proyecto se convierten en los requisitos. El proveedor:
* no necesitará poderosos servidores que reenvíen la señal de los módulos
* no necesitará grandes BBDD que almacenen la ruta de los módulos
* no necesitará un servidor de aplicaciones JavaWS, como funciona Micronav
El cliente:
* no necesitará invertir en costoso software propietario (SQL Server, Map Point, aplicaciones cliente/servidor) como exige Satdata
* no necesitará contratar un caro mantenimento: se ofrece como un paquete final
La consecución de estas metas sólo es posible solucionando los problemas con el prisma del Open Source. Apoyándonos en proyectos libres y/o gratuitos se logra abaratar costes de explotación a un mínimo de CERO.

Las pegas son:
* no es posible controlar el camino seguido
* no se puede saber la posición en un instante dado, sino la que hay en un rango del doble de tiempo de transmisión de señales

Ventajas:
* un proveedor o hosting gratuito permite que la aplicación funcione mucho tiempo después de que la empresa haya desaparecido: garantía absoluta para el cliente
* imágenes satelitales de gran claridad

Dos métodos:
# Un server tiene las IP de los módulos, comunicada periódicamente por éstos. Cuando actualiza la vista, genera el KML consultando a los módulos por su posición.
# El server conoce las posiciones de los módulos, pues éstos la comunican periódicamente. La actualización de la vista se hace en base de las posiciones almacenadas.
El primero requiere más tráfico, y es más inseguro por que expone un servicio del módulo. Además, los hosting gratuitos no permiten abrir sockets. La contrapartida es que al usar ws, se transmiten más bytes (casi 400, en lugar de unos 50). Por tanto, la tasa de transmisión debe reducirse en la misma magnitud (8 veces) para que el coste sea el mismo. Se transmite cada 4 minutos en lugar de 30 segundos.

== Método 2 ==
Un usuario, es propietario de uno o más módulos. Estos módulos, identificados por una especie de código IMEI expedido por el fabricante que sirve para controlar cuáles se han vendido y cuales no, comunican su posición al servidor contactando unos webservices.
El ws que recoge las posiciones es report.php . Recibe como parámetros imei, x e y (velocidad más adelante). Si el IMEI es correcto, y corresponde a un módulo real, almacena la posición junto con una marca de hora.
El usuario, que se ha logueado en la aplicación, puede cambiar ciertos aspectos de sus módulos, concretamente unas cadenas de texto informativas (título y descripción que aparecen en el mapa).
Para ver sus módulos geoposicionados, se descarga un archivo KML que interpreta Google Earth. Gracias a la flexibilidad descriptiva del lenguaje KML, se indica que la posición la proporciona un KML server-side llamado genera.php . Éste recibe un código identificativo relacionado con el nombre de usuario, y si es correcto proporciona las posiciones de los módulos del usuario.

=== El servidor ===
El servidor consta de una pequeña aplicación web que permite ver los módulos registrados a nombre de un usuario y realizar pequeñas tareas administrativas.
La posición que pide el KML descargado se hace en base al usuario. Es decir, el descargado sólo contiene un vínculo de red, al script que genera las posiciones de los módulos de ese usuario. Lógicamente si pedimos genera.php?x=juliuco , sería demasiado obvio averiguar las posiciones de otros usuarios. Así que lo haremos mediante una cadena MD5. El nombre de usuario, con cierto añadido ASCII se codifica en base64 y se pasa por md5. El script recibe este código y lo compara con todos los posibles códigos que generan los usuarios existentes. Cuando haya coincidencia, ése es el usuario. Este tipo de ofuscación no impide que alguien que robe el código (mirando el archivo o sniffando el proxy) dé con las posiciones de un usuario.

La aplicacion web guarda la contraseña de acceso mediante un digest md5.

=== El módulo ===
Supongamos que tenemos las siguientes variables en EEPROM:
host='usuarios.lycos.es'
resource='/teleia/geoveo/report.php'
imei=md5('Modulo#1')

El IMEI del módulo es único para ese módulo. Es un hash MD5 de la cadena Modulo#N siendo N el número de fabricación del módulo. De este modo podemos averiguar cuán antiguo es el módulo. También podría hacerse con un número aleatorio, y almacenar nosotros los hashes con su fecha de fabricación. Quizá sea un poco más difícil averiguar un código de un módulo si el MD5 proviene de un aleatorio, pero en el fondo es lo mismo. MD5 son 16 bytes: la probabilidad de acierto es número_de_módulos_fabricados/255^16 (3.4e+38).
La relación entre un módulo y su propietario se establece en el servidor. Es decir, los módulos informan de sus posiciones, pertenezcan a quien pertenezcan.

El módulo abre un socket al puerto 80, a la dirección establecida. Pastea el siguiente mensaje (notación PHP):
 GET {$resource}?imei={$imei}&x={$x}&y={$y} HTTP/1.1\nHost: {$host}\n\n
Muchos servidores sólo hablan HTTP/1.1, por lo tanto se exige especificar el Host en la segunda línea.
El servidor responde lo siguiente:
 HTTP/1.1 200 OK
 Date: Fri, 09 Nov 2007 13:21:54 GMT
 Server: Apache
 X-Powered-By: PHP/5.2.1
 Set-Cookie: LBC=9308eba58b372dcdfbc175fd066ea8c5; expires=Sat, 13-Oct-2012 13:21:55 GMT; path=/; domain=.lycos.es
 Content-Type: text/plain
 X-Cache: MISS from usuarios.lycos.es
 Connection: close
 Transfer-Encoding: chunked
 
 OK
O algún comando de programación del módulo, tal como desactivar, cambiar host, recurso; o error si el código no coincide con un módulo registrado.

La página, de acceso a un usuario y clave, proporciona un listado de los módulos registrados a su nombre.
Ofrece descargar el KML de la flota. Este KML contiene las posiciones y los metadatos de los vehículos, pero no contiene el IMEI MD5 de ningún módulo. En caso de extravío o robo nadie puede manipular los módulos.

Otro servicio web provee el KML en caso de usar la versión móvil. Visualizamos el mapa abriendo la aplicación y en Find, escribimos:
 http://usuarios.lycos.es/teleia/gv.php?=usuario,clave,num_modulo
 ¿este no tiene autorefresco?



== Instalación Windoze ==
Instalar GE.
Descargar KML.
Hacer doble clic.

Las posiciones se autorefrescan a los 2 minutos. O si se pulsa en boton derecho->Actualizar .

Programas cliente móviles:
*http://google.es/gmm
*http://j2memap.landspurg.net/

Ir a Find, e introducir la url correspondiente.


== Acceso al servidor ==
Hosteado en un servidor gratuito: Tripod Lycos.
Para trabajar cómodamente, montamos el ftp que ofrecen como un sistema de archivos local.
 $ sudo curlftpfs -o allow_other ftp://teleia:snoofoons@ftp.usuarios.lycos.es /mnt


== El fichero KML ==
Es un lenguaje descriptivo tipo XML. La primera línea debe ser la declaración xml, si no salta error.
Debe haber una única función raíz: 1 Placemark o 1 Folder con varios Placemark.
Si el Folder es único dentro del Networklink, el folder pasa al nivel raíz del link.

*http://www.fmepedia.com/index.php/Google_Earth_Data_Exchange_(KML)#NetworkLink
*http://code.google.com/apis/kml/documentation/kml_tut.html#network_links
*http://puff.images.alaska.edu/dynamic_kml.shtml

== Mejoras ==
magic_quotes
onclick si hay texto
validación de entradas, imei,x,y....

=== Coordenadas ===
Google Maps trabaja en grados. Para pasar coordenadas del tipo ''grados''º ''minutos''' ''segundos''" sólo hay que aplicar una sencilla opreación aritmética que la calculadora de Windows hará con mucho gusto:
 grados_google = grados + minutos / 60 + segundos / 3600;
Google aprecia un máximo de 15 decimales.
Si las coordenadas son sur(S) u oeste(W) hay que poner el signo - antes del resultado. Ejemplo:
 (-20.432, -3.4554)

== Modelo de negocio ==
 1 user=1 email=1 modulo=∞ amigos
pagas 20€ por actualizar posiciones y tener más de 1 módulos (20€/cada uno)
puedes ver a tus amigos en el KML
 friends & modules
 send invitation
 delete as friend

== API Key ==
Es un codigo que ofrece Google para poderañadir y personalizar un iframe de Google Maps en un site.
Hace falta una API Key por cada dominio en el que vaya a estar alojada la página. En nuestro caso tres. Uno para el dominio de desarrollo (Mizar), otro para el dominio de testing (DynDNS), y otro para el dominio de producción (World Wide Web).
Para que la API sea correcta hay que intriducir la dirección completa en el "Sign Up". Ej:
 Para el dominio de producción habria que poner: http://www.solariaenergia.com
 para el dominio de desarrollo: http://solariaenergia.com.mizar
 y para el dominio de testting: http://solaria.dyndns.info

Para conseguir una API Key entra [http://code.google.com/apis/maps/signup.html aquí] y pon el dominio que corresponda.