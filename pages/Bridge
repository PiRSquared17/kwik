Construimos un bridge software, de tal modo que por el precio de una tarjeta de red, nos sacamos un puesto más (en lugar de pagar por un switch, aunque en conjunto serían un switch muy caro!). Ofrece una ventaja sobre los switch: la posibilidad de filtrado. Aquí describiré cómo hacer un bridge proxy transparente con Squid (sin NAT). Este modo es más sencillo a la hora de integrarlo en redes existentes.

== FreeBSD ==
Con un sistema provisto de dos interfaces de red, rl0 de cara a un switch al resto de la oficina y rl1 hacia el router, hay dos maneras de hacer un bridge. La primera o tradicional:

*/boot/loader.conf
 bridge_load="YES"

*/etc/sysctl.conf
 net.link.ether.bridge.enable=1
 net.link.ether.bridge.config=rl0,rl1
 net.link.ether.bridge.ipf=1

Sin embargo este bridge no tiene la posibilidad de filtrado, y pasa de squid olímpicamente. En esta configuración hay que cambiar el navegador cliente para que use 10.0.0.9:3128 como proxy.

Nnecesitamos un bridge al estilo linux, con una interfaz. Este es el segundo modo:
*/boot/loader.conf
 if_bridge_load="YES"

*/etc/rc.conf:
 cloned_interfaces="bridge0"
 ifconfig_bridge0="addm rl0 addm rl1 up"
 ifconfig_rl0="up"
 ifconfig_rl1="inet 10.0.0.9 netmask 0xffffff00"
 
 ipfilter_enable="YES"
 ipfilter_rules="/root/fil"
 ipnat_enable="YES"
 ipnat_rules="/root/bri"
 #ipmon_enable="YES"
 #ipfs_enable="YES"

NO necesita gateway_enable="YES" (sysctl net.inet.ip.forwarding=0) por que no hacemos router.
NO se fija la IP en el bridge, sino no funciona.
Aplicar con /etc/netstart .

Seguimos el procedimiento de configuración de [http://localhost/www/wikidpto/index.php/Proxy_NOSteL#Instalaci.C3.B3n_y_configuraci.C3.B3n Squid en FreeBSD]. Este documento se refiere a un proxy router.

Igualmente hay que redirigir el tráfico que pasa por el puerto 80 a Squid. Para el cliente todo esto ha de ser transparente, sin configuración por su parte. El modo de hacerlo es añadiendo la siguiente regla:
 # ipnat -CF
 # ipnat -f /root/bri
 # cat /root/bri
 rdr bridge0 0/0 port 80 -> 10.0.0.9 port 3128 tcp
¡no vale 127.0.0.1 en la redirección! extraño...

Los https siguen pasando. Para cargárnoslos ponemos:
 # ipf -Fa -f /root/fil
 block in from any to any port = 443
Sin embargo no es un firewall muy bueno. Uno mejor, de tipo inclusivo, restrigiría todo acceso de los host al otro lado del bridge a ningún servicio indeseado. El acceso SSH se realiza por la interfaz rl1, la externa.
 pass in quick on rl0 proto icmp from any to any icmp-type 8
 pass in quick on rl0 proto udp from any to 80.58.61.250 port = 53
 pass in quick on rl0 proto udp from any to any port = 67
 pass in quick on rl0 proto tcp from any to any port = 80
 pass in quick on rl0 proto tcp from any to 10.0.0.9 port = 3128
 block in quick on rl0 all
Se emplea la sintaxis moderna de ipf (en detrimento de la tradicional stateless y last match wins). El significado es el siguiente:
#permito ping al exterior, ¿por qué no?
#permito resolver nombres; todos los equipos de la red deben tener los mismos DNS
#permito DHCP si el servidor DHCP está al otro lado del bridge
#permito pedir páginas web, el destino puede ser ''any'' o 10.0.0.9: squid lo interceptará
#permito la redirección a través de squid: sin ésto no funcionaría
#bloqueo todo lo demás: ningún otro puerto TCP susceptible de usarse como contacto a un proxy externo. si acaso, permito acceso SMTP/POP/HTTPS a ciertos servidores

Comandos para ver nuestras reglas:
 ipfstat -i
 ipfstat -t
 ipfstat -in
 ipfstat -on
El log de paquetes capturados se traza mediante ipmon, pero no nos interesa.

La config de squidGuard es muy simple, no hay permitidos, a todo el mundo se le prohibe el paso.
 dbhome /var/db/squidGuard
 logdir /usr/local/squid/logs
 
 dest ofi {
        log             ofi
        domainlist      oficina/domains
 }
 
 acl {
        default {
                pass ofi none
                redirect http://10.0.0.1 #un host de la red, por que no?
        }
 }

Y en squid.conf dejo toda la red:
 acl all src 0/0


Ayuda:
*http://www.bsdforums.org/forums/showthread.php?t=48705
*http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/network-bridging.html
*http://www.benzedrine.cx/transquid.html
*http://gulsin.org/2007/06/01/creating-an-ipf-firewall-with-solaris-10/
*http://coombs.anu.edu.au/ipfilter/examples.html
*http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/firewalls-ipf.html
*http://www.obfuscation.org/ipf

== Linux ==

 # apt-get install bridge-utils


por comandos:

 # ifconfig eth0 inet 0.0.0.0
 # ifconfig eth1 inet 0.0.0.0
 # brctl addbr br0 #o el nombre que se nos antoje
 # brctl addif br0 eth0
 # brctl addif br0 eth1
 # ifconfig br0 up
 # ifconfig br0 192.168.1.6


o lo ponemos en network/interfaces:
 auto br0
 iface br0 inet static
   address 192.168.1.6
   netmask 0xffffff00
   gateway 192.168.1.101
   bridge_ports eth1 eth2

Vemos el tráfico que circula por nuestro bridge:
 tcpdump -i br0

Han de prepararse estas reglas en un script de inicio:
 /sbin/ebtables -t broute -A BROUTING -p IPv4 --ip-protocol 6 --ip-destination-port 80 -j redirect --redirect-target ACCEPT
 /sbin/iptables -t nat -A PREROUTING -i br0 -p tcp --dport 80 -j REDIRECT --to-port 3128
Hay [http://www.squid-cache.org/mail-archive/squid-users/200403/0904.html quien dice] que basta con:
 /sbin/iptables -t nat -A POSTROUTING -p tcp --dport 80 -s xxxxx -j REDIRECT --to-port 3128
Porque al parecer, iptables puede actuar sobre br0 en kernels 2.6 (y es menos limitado que ebtables). Ej:
 iptables -i br0 -m physdev --physdev-in eth0 -j DROP

Al igual que en FreeBSD, no es necesario que haya forwarding, por tanto:
 echo 1 > /proc/sys/net/ipv4/ip_forward
o
 # cat /etc/sysctl.conf
 net.ipv4.conf.default.forwarding=1
 # sysctl -p
o
 # cat /etc/network/options
 ip_forward=yes
Que son funcionalmente equivalentes, nos los podemos ahorrar.

*http://wiki.freaks-unidos.net/debian-bridge-es
*http://linux-net.osdl.org/index.php/Bridge
*http://www.linuxjournal.com/article/8172
*http://wiki.openzaurus.org/HowTos/Bridging_with_Ubuntu
*http://freshmeat.net/articles/view/1433/
*http://teklimbu.wordpress.com/2007/10/11/running-a-transparent-linux-squid-bridge/

Implementa QoS en el bridge:
 http://docs.google.com/View?docid=ddbzssqk_2cc95n2

=== Conexión null-modem TCP ===
No lo he conseguido. Sería así...:

Linux-side:
 # slattach -p slip -s 115200 /dev/ttyS0 &
 # ifconfig sl0 192.168.1.1 pointopoint 192.168.1.2 up #pointopoint no hace broadcast ARP
 # route
 # route add -host 10.0.0.2 dev sl0
FreeBSD-side:
 # slattach -h -c -s 115200 /dev/cuad0 &
 # ifconfig sl0 192.168.1.2 192.168.1.1
 # netstat -r
 # route add -host 10.0.0.2 -iface sl0


Hyperterminal puerto serie:
 socat READLINE,history=$HOME/.cmd_history /dev/ttyS0,raw,echo=0,crnl